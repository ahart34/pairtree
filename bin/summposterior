#!/usr/bin/env python3
import numpy as np
import argparse
import os
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'lib'))

import common
import resultserializer
import clustermaker
import inputparser

import json
import util
import plotutil

def write_header(runid, outf):
  print('<!doctype html><html lang="en"><head><meta charset="utf-8"><title>Posterior summary</title>', file=outf)
  for jsurl in (
    'https://d3js.org/d3.v5.min.js',
    #'https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js',
    'https://cdnjs.cloudflare.com/ajax/libs/cytoscape/3.14.0/cytoscape.min.js',

    'https://cdn.jsdelivr.net/npm/klayjs@0.4.1/klay.min.js',
    'https://cdn.jsdelivr.net/npm/cytoscape-klay@3.1.3/cytoscape-klay.min.js',

    #'https://cdn.jsdelivr.net/npm/cytoscape-euler@1.2.2/cytoscape-euler.min.js',

    #'https://cdn.jsdelivr.net/npm/weaverjs@1.2.0/dist/weaver.min.js',
    #'https://cdn.jsdelivr.net/npm/cytoscape-spread@3.0.0/cytoscape-spread.min.js',

    'https://cdn.jsdelivr.net/npm/numeric@1.2.6/numeric-1.2.6.min.js',
    'https://cdn.jsdelivr.net/npm/layout-base@1.0.2/layout-base.min.js',
    'https://cdn.jsdelivr.net/npm/cose-base@1.0.1/cose-base.min.js',
    'https://cdn.jsdelivr.net/npm/cytoscape-fcose@1.2.0/cytoscape-fcose.min.js',

    # We need these just to display edge weight over edges on hover. Bleh.
    'https://unpkg.com/popper.js@1',
    'https://unpkg.com/tippy.js@5',
    'https://cdn.jsdelivr.net/npm/cytoscape-popper@1.0.6/cytoscape-popper.min.js',
  ):
    print('<script type="text/javascript" src="%s"></script>' % jsurl, file=outf)
  for jsfn in ('tree_plotter.js', 'posterior_summ.js'):
    print('<script type="text/javascript">%s</script>' % plotutil.read_file(jsfn), file=outf)
  print('<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">', file=outf)
  print('<style type="text/css">%s</style>' % plotutil.read_file('tree.css'), file=outf)
  print('</head><body><main role="main" class="container">', file=outf)
  if runid is not None:
    print('<h1>%s</h1>' % runid, file=outf)

def summarize(results, params, supervars, outf):
  N = len(results['prob'])
  assert np.array_equal(np.argsort(-results['prob'], kind='stable'), np.arange(N))

  _make_struct = lambda tidx: util.make_tree_struct(
    results['struct'][tidx],
    results['count'][tidx],
    results['llh'][tidx],
    results['prob'][tidx],
    results['phi'][tidx],
    supervars,
    params['samples'],
  )

  limit = 20
  structs = [_make_struct(tidx) for tidx in range(min(N, limit))]
  json_trees = {
    'structs': structs,
  }

  print("<script type=\"text/javascript\">var tree_json = '%s'; var results = JSON.parse(tree_json);</script>" % json.dumps(structs), file=outf)
  print('<h2>Trees</h2>', file=outf)
  print('<ul><li>Number of unique trees: %s</li></ul>' % N, file=outf)
  print('<table id="trees" class="table table-striped"><thead><tr><th>Index</th><th>Posterior</th><th>nLgLh</th><th>Count</th><th>Structure</th></tr></thead><tbody class="container"></tbody></table>', file=outf)
  print(plotutil.js_on_load("(new PosteriorSumm()).plot(results, '#trees .container');"), file=outf)

def _make_congraph(results):
  adjms = np.array([util.convert_parents_to_adjmatrix(struct) for struct in results['struct']])
  weights = results['prob']
  assert len(weights) == len(adjms)
  assert np.isclose(1, np.sum(weights))
  graph = np.sum(weights[:,np.newaxis,np.newaxis] * adjms, axis=0)
  np.fill_diagonal(graph, 0)

  parent_sum = np.sum(graph, axis=0)
  assert parent_sum[0] == 0 and np.allclose(1, parent_sum[1:])
  assert np.all(0 <= graph) and np.all(graph <= 1)

  return graph

def _plot_congraph(congraph, outf):
  print('''

  <h2>Consensus graph</h2>
  <form>
    <div class="row">
      <div class=" col">
        <label for="threshold_chooser">Edge threshold: <span id="congraph_threshold"></span></label>
        <input type="range" id="threshold_chooser" class="form-control-range">
      </div>

      <div class=" col">
        <label for="layout_chooser">Layout</label>
        <select class="form-control" id="layout_chooser">
        </select>
      </div>
    </div>
  </form>

  <style type="text/css">
  #congraph { width: 100%%; height: 400px; }
  </style>
  <div id="congraph" class="row"></div>

  <script type="text/javascript">
  var congraph_json = '%s';
  var congraph = JSON.parse(congraph_json);
  </script>
  ''' % json.dumps(congraph.tolist()), file=outf)
  print(plotutil.js_on_load("(new CongraphPlotter()).plot(congraph, '#congraph', '#congraph_threshold');"), file=outf)

def write_footer(outf):
  print('</main></body></html>', file=outf)

def main():
  parser = argparse.ArgumentParser(
    description='LOL HI THERE',
    formatter_class=argparse.ArgumentDefaultsHelpFormatter
  )
  parser.add_argument('--runid')
  parser.add_argument('--plot-congraph', action='store_true')
  parser.add_argument('ssm_fn')
  parser.add_argument('params_fn')
  parser.add_argument('results_fn')
  parser.add_argument('html_out_fn')
  args = parser.parse_args()

  results = resultserializer.load(args.results_fn)
  variants = inputparser.load_ssms(args.ssm_fn)
  params = inputparser.load_params(args.params_fn)
  supervars = clustermaker.make_cluster_supervars(results['clusters'], variants)
  supervars = [supervars[vid] for vid in common.sort_vids(supervars.keys())]

  with open(args.html_out_fn, 'w') as outf:
    write_header(args.runid, outf)
    if args.plot_congraph:
      congraph = _make_congraph(results)
      _plot_congraph(congraph, outf)
    summarize(results, params, supervars, outf)
    write_footer(outf)

if __name__ == '__main__':
  main()
